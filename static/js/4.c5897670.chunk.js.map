{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","valid","interacted","password","autoComplete","minLength","formIsValid","isSignUp","inputChangedHandler","event","inputId","updatedFormElement","updateObject","target","checkValidity","updatedForm","setState","validity","checkFormIsValid","updatedOrderForm","inputIdentifier","onSubmitHandler","preventDefault","props","onAuth","switchAuthModeSignUp","prevState","this","buildingBurger","authRedirectPath","onSetRedirectPath","rules","isValid","trim","length","maxLength","formElementArray","errorMessage","form","isAuthenticated","to","error","message","loading","key","push","id","config","onSubmit","map","element","name","elementValue","changed","invalid","shouldValidate","className","styles","ControlGroup","btnType","disabled","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","setAuthRedirect","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","display","Input","label"],"mappings":"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","file":"static/js/4.c5897670.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__2_kZr\",\"ControlGroup\":\"Auth_ControlGroup__1C4bH\"};","import React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\n\r\nimport styles from \"./Auth.module.css\";\r\n\r\nimport { auth, setAuthRedirect } from \"../../store/actions/index\";\r\nimport { updateObject, checkValidity } from \"../../shared/utility\";\r\n\r\nexport class Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your Email\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        interacted: false,\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\",\r\n          autoComplete: \"off\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 6,\r\n        },\r\n        valid: false,\r\n        interacted: false,\r\n      },\r\n    },\r\n    formIsValid: false,\r\n    isSignUp: true,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== \"/\") {\r\n      this.props.onSetRedirectPath();\r\n    }\r\n  }\r\n\r\n  inputChangedHandler = (event, inputId) => {\r\n    const updatedFormElement = updateObject(this.state.controls[inputId], {\r\n      interacted: true,\r\n      value: event.target.value,\r\n      valid: checkValidity(\r\n        event.target.value,\r\n        this.state.controls[inputId].validation\r\n      ),\r\n    });\r\n\r\n    const updatedForm = updateObject(this.state.controls, {\r\n      [inputId]: updatedFormElement,\r\n    });\r\n\r\n    this.setState({\r\n      controls: updatedForm,\r\n    });\r\n\r\n    const validity = this.checkFormIsValid(updatedForm);\r\n    if (validity !== this.state.formIsValid) {\r\n      this.setState({\r\n        formIsValid: validity,\r\n      });\r\n    }\r\n  };\r\n\r\n  checkFormIsValid = (updatedOrderForm) => {\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n    return formIsValid;\r\n  };\r\n\r\n  checkValidity(value, rules) {\r\n    let isValid = true;\r\n    if (rules) {\r\n      if (rules.required) {\r\n        isValid = value.trim() !== \"\" && isValid;\r\n      }\r\n      if (rules.minLength) {\r\n        isValid = value.length >= rules.minLength && isValid;\r\n      }\r\n      if (rules.maxLength) {\r\n        isValid = value.length <= rules.minLength && isValid;\r\n      }\r\n    }\r\n    return isValid;\r\n  }\r\n\r\n  onSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.state.isSignUp\r\n    );\r\n  };\r\n\r\n  switchAuthModeSignUp = (event) => {\r\n    event.preventDefault();\r\n    const prevState = !this.state.isSignUp;\r\n    this.setState({\r\n      isSignUp: prevState,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const formElementArray = [];\r\n    let errorMessage = null;\r\n    let form = <Spinner />;\r\n\r\n    if (this.props.isAuthenticated) {\r\n      //console.log(\"[Auth.js] redirect to : \", this.props.authRedirectPath);\r\n      form = <Redirect to={this.props.authRedirectPath} />;\r\n    } else {\r\n      if (this.props.error) {\r\n        errorMessage = <p>{this.props.error.message}</p>;\r\n      }\r\n      if (!this.props.loading) {\r\n        for (let key in this.state.controls) {\r\n          formElementArray.push({\r\n            id: key,\r\n            config: this.state.controls[key],\r\n          });\r\n        }\r\n        form = (\r\n          <form onSubmit={this.onSubmitHandler}>\r\n            <h1>\r\n              {this.state.isSignUp\r\n                ? \"Create New Account\"\r\n                : \"SignIn to your Account\"}\r\n            </h1>\r\n            <br />\r\n            {formElementArray.map((element) => (\r\n              <Input\r\n                key={element.id}\r\n                name={element.id}\r\n                elementType={element.config.elementType}\r\n                elementConfig={element.config.elementConfig}\r\n                value={element.config.elementValue}\r\n                changed={(event) => this.inputChangedHandler(event, element.id)}\r\n                invalid={!element.config.valid}\r\n                shouldValidate={element.config.validation}\r\n                interacted={element.config.interacted}\r\n              />\r\n            ))}\r\n            <div className={styles.ControlGroup}>\r\n              <Button btnType=\"Success\" disabled={!this.state.formIsValid}>\r\n                {this.state.isSignUp ? \"Signup\" : \"Sign-In\"}\r\n              </Button>\r\n              <Button btnType=\"Danger\" clicked={this.switchAuthModeSignUp}>\r\n                Switch to {!this.state.isSignUp ? \"Signup\" : \"Sign-In\"}\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        );\r\n      }\r\n    }\r\n    return (\r\n      <div className={styles.Auth}>\r\n        {form}\r\n        {errorMessage}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  loading: state.auth.loading,\r\n  error: state.auth.error,\r\n  isAuthenticated: state.auth.token ? true : false,\r\n  buildingBurger: state.burgerBuilder.building,\r\n  authRedirectPath: state.auth.authRedirectPath,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onAuth: (email, password, isSignUp) =>\r\n    dispatch(auth(email, password, isSignUp)),\r\n  onSetRedirectPath: () => dispatch(setAuthRedirect(\"/\")),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n","import React from \"react\";\r\n\r\nimport styles from \"./Input.module.css\";\r\n\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  const inputClasses = [styles.InputElement];\r\n  if (props.invalid && props.shouldValidate && props.interacted) {\r\n    inputClasses.push(styles.Invalid);\r\n  }\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.elementValue}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.elementValue}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        >\r\n          {props.elementConfig.options.map((option) => (\r\n            <option value={option.value} key={option.value}>\r\n              {option.display}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.elementValue}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <div className={styles.Input}>\r\n      <label>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2oCfx\",\"InputElement\":\"Input_InputElement__3uia5\",\"Invalid\":\"Input_Invalid__3BX3o\"};"],"sourceRoot":""}